#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Oct 12 09:04:25 2019

@author: pavithra
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv("train_cleaned.csv")
data.head()

x= data.drop(['Item_Outlet_Sales'],axis=1)
y= data['Item_Outlet_Sales']
x.shape, y.shape

from sklearn.model_selection import train_test_split
train_x,test_x,train_y,test_y= train_test_split(x,y,random_state = 56)

from sklearn.linear_model import LinearRegression as LR
from sklearn.metrics import mean_absolute_error as mse

lr= LR()
lr.fit(train_x,train_y)

train_predict = lr.predict(train_x)
k=mse(train_predict,train_y)
print("Traininng Mean Absolute Error",k)

test_predict = lr.predict(test_x)
k=mse(test_predict,test_y)
print("Test mean Absolute Error: ",k)

lr.coef_

plt.figure(figsize=(5,4),dpi=120,facecolor='w',edgecolor='b')
x = range(len(train_x.columns))
y = lr.coef_
plt.bar(x,y)
plt.xlabel("Variables")
plt.ylabel('Coefficients')
plt.title("Coefficient plot")

residuals = pd.DataFrame({'fitted values':test_y,'predicted values': test_predict,})

residuals['residuals']=residuals['fitted values']-residuals['predicted values']
residuals.head()

#plot residuals curve
plt.figure(figsize=(10,6),dpi=120,facecolor='w',edgecolor='b')
f = range(0,2131)
k = [0 for i in range(0,2131)]
plt.scatter(f, residuals.residuals[:],label='residuals')
plt.plot(f,k,color='red',label = 'regression line')
plt.xlabel('fitted points')
plt.ylabel("resideual plot")
plt.ylim(-4000,4000)
plt.legend()

#Checking Distributed of Residuals
plt.figure(figsize=(10,6),dpi =120,facecolor='w',edgecolor='b')
plt.hist(residuals.residuals,bins=150)
plt.xlabel('Error')
plt.ylabel('Frequency')
plt.title('Distribution of Error Terms')
plt.show()

from statsmodels.graphics.gofplots import qqplot
fig, ax=plt.subplots(figsize=(5,5),dpi=120)
qqplot(residuals.residuals, line = 's', ax=ax)
plt.xlabel('Residuals Quantitles')
plt.ylabel('Ideal Scaled Quantiles')
plt.title('Checking distribution of Residual Errors')
plt.show()

